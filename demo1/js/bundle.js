(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';
var ThreeCamera, ThreeLight, ThreeObject, ThreeScene, camera, config, init, object, renderer, scene;

config = require('./config');

ThreeScene = require('./scene');

ThreeCamera = require('./camera');

ThreeLight = require('./light');

ThreeObject = require('./object');

camera = null;

scene = null;

renderer = null;

object = null;

init = function(data) {
  var $container;
  scene = ThreeScene(config);
  camera = ThreeCamera(scene, config);
  object = ThreeObject(scene, config, data);
  $container = document.getElementById('canvas');
  if (window.WebGLRenderingContext) {
    renderer = new THREE.WebGLRenderer({
      antialias: true
    });
  } else {
    renderer = new THREE.CanvasRenderer();
  }
  renderer.setSize(window.innerWidth, window.innerHeight);
  renderer.setClearColor(0x000000, 1);
  $container.appendChild(renderer.domElement);
  renderer.render(scene, camera);
};

window.addEventListener('load', init, false);



},{"./camera":2,"./config":3,"./light":4,"./object":5,"./scene":6}],2:[function(require,module,exports){
'use strict';
var config, init;

config = require('./config');

init = function(scene, config) {
  var camera;
  camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 100);
  camera.position.set(0, 0, 10);
  camera.lookAt(scene.position);
  scene.add(camera);
  return camera;
};

module.exports = init;



},{"./config":3}],3:[function(require,module,exports){
'use strict';
var config;

config = {};

module["export"] = config;



},{}],4:[function(require,module,exports){
'use strict';
var init;

init = function(scene) {
  var pointLight;
  pointLight = new THREE.PointLight(0xffffff);
  pointLight.position.x = 10;
  pointLight.position.y = 50;
  pointLight.position.z = 130;
  scene.add(pointLight);
  return pointLight;
};

module.exports = init;



},{}],5:[function(require,module,exports){
'use strict';
var init, initMesh;

initMesh = function(scene, config, dataset) {
  var squareGeometry, squareMaterial, squareMesh, triangleGeometry, triangleMaterial, triangleMesh;
  triangleGeometry = new THREE.Geometry();
  triangleGeometry.vertices.push(new THREE.Vector3(0.0, 1.0, 0.0));
  triangleGeometry.vertices.push(new THREE.Vector3(-1.0, -1.0, 0.0));
  triangleGeometry.vertices.push(new THREE.Vector3(1.0, -1.0, 0.0));
  triangleGeometry.faces.push(new THREE.Face3(0, 1, 2));
  triangleGeometry.faces[0].vertexColors[0] = new THREE.Color(0xff0000);
  triangleGeometry.faces[0].vertexColors[1] = new THREE.Color(0x00ff00);
  triangleGeometry.faces[0].vertexColors[2] = new THREE.Color(0x0000ff);
  triangleMaterial = new THREE.MeshBasicMaterial({
    vertexColors: THREE.VertexColors,
    side: THREE.DoubleSide
  });
  triangleMesh = new THREE.Mesh(triangleGeometry, triangleMaterial);
  triangleMesh.position.set(-1.5, 0.0, 4.0);
  scene.add(triangleMesh);
  squareGeometry = new THREE.Geometry();
  squareGeometry.vertices.push(new THREE.Vector3(-1.0, 1.0, 0.0));
  squareGeometry.vertices.push(new THREE.Vector3(1.0, 1.0, 0.0));
  squareGeometry.vertices.push(new THREE.Vector3(1.0, -1.0, 0, 0));
  squareGeometry.vertices.push(new THREE.Vector3(-1.0, -1.0, 0.0));
  squareGeometry.faces.push(new THREE.Face3(0, 1, 2));
  squareGeometry.faces.push(new THREE.Face3(0, 2, 3));
  squareMaterial = new THREE.MeshBasicMaterial({
    color: 0x8080ff,
    side: THREE.DoubleSide
  });
  squareMesh = new THREE.Mesh(squareGeometry, squareMaterial);
  squareMesh.position.set(1.5, 0.0, 4.0);
  return scene.add(squareMesh);
};

init = function(scene, config, dataset) {
  var object;
  object = {};
  if (dataset) {
    object.mesh = initMesh(scene, config, dataset);
  }
  return object;
};

module.exports = init;



},{}],6:[function(require,module,exports){
'use strict';
var init;

init = function() {
  var scene;
  scene = new THREE.Scene();
  return scene;
};

module.exports = init;



},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
