(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';
var ThreeCamera, ThreeLight, ThreeObjects, ThreeScene, animateScene, camera, config, init, objects, renderScene, renderer, scene;

config = require('./config');

ThreeScene = require('./scene');

ThreeCamera = require('./camera');

ThreeLight = require('./light');

ThreeObjects = require('./object');

camera = null;

scene = null;

renderer = null;

objects = null;

init = function(data) {
  var $container;
  scene = ThreeScene(config);
  camera = ThreeCamera(scene, config);
  objects = ThreeObjects(scene, config, data);
  $container = document.getElementById('canvas');
  if (window.WebGLRenderingContext) {
    renderer = new THREE.WebGLRenderer({
      antialias: true
    });
  } else {
    renderer = new THREE.CanvasRenderer();
  }
  renderer.setSize(window.innerWidth, window.innerHeight);
  renderer.setClearColor(0x000000, 1);
  $container.appendChild(renderer.domElement);
  return animateScene();
};

renderScene = function() {
  renderer.render(scene, camera);
};

animateScene = function() {
  objects.pyramid.rotation.y += 0.1;
  objects.box.rotateOnAxis(new THREE.Vector3(1, 1, 1).normalize(), 0.075);
  requestAnimationFrame(animateScene);
  renderScene();
};

window.addEventListener('load', init, false);



},{"./camera":2,"./config":3,"./light":4,"./object":5,"./scene":6}],2:[function(require,module,exports){
'use strict';
var config, init;

config = require('./config');

init = function(scene, config) {
  var camera;
  camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 100);
  camera.position.set(0, 0, 10);
  camera.lookAt(scene.position);
  scene.add(camera);
  return camera;
};

module.exports = init;



},{"./config":3}],3:[function(require,module,exports){
'use strict';
var config;

config = {};

module["export"] = config;



},{}],4:[function(require,module,exports){
'use strict';
var init;

init = function(scene) {
  var pointLight;
  pointLight = new THREE.PointLight(0xffffff);
  pointLight.position.x = 10;
  pointLight.position.y = 50;
  pointLight.position.z = 130;
  scene.add(pointLight);
  return pointLight;
};

module.exports = init;



},{}],5:[function(require,module,exports){
'use strict';
var init, initMesh;

initMesh = function(scene, config, dataset) {
  var boxGeometry, boxMaterial, boxMaterials, boxMesh, objects, pyramidGeometry, pyramidMaterial, pyramidMesh;
  objects = {};
  pyramidGeometry = new THREE.CylinderGeometry(0, 1.5, 1.5, 4, false);
  pyramidGeometry.faces.map(function(face, i) {
    if (face instanceof THREE.Face4) {
      face.VertexColors[0] = new THREE.Color(0xff0000);
      if (i % 2 === 0) {
        face.vertexColors[1] = new THREE.Color(0x00ff00);
        face.vertexColors[2] = new THREE.Color(0x0000ff);
      } else {
        face.vertexColors[1] = new THREE.Color(0x0000ff);
        face.vertexColors[2] = new THREE.Color(0x00ff00);
      }
      return face.vertexColors[3] = new THREE.Color(0xff0000);
    } else {
      face.vertexColors[0] = new THREE.Color(0xff0000);
      face.vertexColors[1] = new THREE.Color(0x00ff00);
      return face.vertexColors[2] = new THREE.Color(0x0000ff);
    }
  });
  pyramidMaterial = new THREE.MeshBasicMaterial({
    vertexColors: THREE.VertexColors,
    side: THREE.DoubleSide
  });
  pyramidMesh = new THREE.Mesh(pyramidGeometry, pyramidMaterial);
  pyramidMesh.position.set(-1.5, 0.0, 4.0);
  scene.add(pyramidMesh);
  objects.pyramid = pyramidMesh;
  boxGeometry = new THREE.BoxGeometry(1.5, 1.5, 1.5);
  boxMaterials = [
    new THREE.MeshBasicMaterial({
      color: 0xff0000
    }), new THREE.MeshBasicMaterial({
      color: 0x00ff00
    }), new THREE.MeshBasicMaterial({
      color: 0x0000ff
    }), new THREE.MeshBasicMaterial({
      color: 0xffff00
    }), new THREE.MeshBasicMaterial({
      color: 0x00ffff
    }), new THREE.MeshBasicMaterial({
      color: 0xffffff
    })
  ];
  boxMaterial = new THREE.MeshFaceMaterial(boxMaterials);
  boxMesh = new THREE.Mesh(boxGeometry, boxMaterial);
  boxMesh.position.set(1.5, 0.0, 4.0);
  scene.add(boxMesh);
  objects.box = boxMesh;
  return objects;
};

init = function(scene, config, dataset) {
  return initMesh(scene, config, dataset);
};

module.exports = init;



},{}],6:[function(require,module,exports){
'use strict';
var init;

init = function() {
  var scene;
  scene = new THREE.Scene();
  return scene;
};

module.exports = init;



},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
