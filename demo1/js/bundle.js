(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';
var ThreeCamera, ThreeLight, ThreeObjects, ThreeScene, animateScene, camera, config, init, objects, renderScene, renderer, scene;

config = require('./config');

ThreeScene = require('./scene');

ThreeCamera = require('./camera');

ThreeLight = require('./light');

ThreeObjects = require('./object');

camera = null;

scene = null;

renderer = null;

objects = null;

init = function(data) {
  var $container;
  scene = ThreeScene(config);
  camera = ThreeCamera(scene, config);
  objects = ThreeObjects(scene, config, data);
  $container = document.getElementById('canvas');
  if (window.WebGLRenderingContext) {
    renderer = new THREE.WebGLRenderer({
      antialias: true
    });
  } else {
    renderer = new THREE.CanvasRenderer();
  }
  renderer.setSize(window.innerWidth, window.innerHeight);
  renderer.setClearColor(0x000000, 1);
  $container.appendChild(renderer.domElement);
  return animateScene();
};

renderScene = function() {
  renderer.render(scene, camera);
};

animateScene = function() {
  objects.triangle.rotation.y += 0.1;
  objects.square.rotation.x -= 0.075;
  requestAnimationFrame(animateScene);
  renderScene();
};

window.addEventListener('load', init, false);



},{"./camera":2,"./config":3,"./light":4,"./object":5,"./scene":6}],2:[function(require,module,exports){
'use strict';
var config, init;

config = require('./config');

init = function(scene, config) {
  var camera;
  camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 100);
  camera.position.set(0, 0, 10);
  camera.lookAt(scene.position);
  scene.add(camera);
  return camera;
};

module.exports = init;



},{"./config":3}],3:[function(require,module,exports){
'use strict';
var config;

config = {};

module["export"] = config;



},{}],4:[function(require,module,exports){
'use strict';
var init;

init = function(scene) {
  var pointLight;
  pointLight = new THREE.PointLight(0xffffff);
  pointLight.position.x = 10;
  pointLight.position.y = 50;
  pointLight.position.z = 130;
  scene.add(pointLight);
  return pointLight;
};

module.exports = init;



},{}],5:[function(require,module,exports){
'use strict';
var init, initMesh;

initMesh = function(scene, config, dataset) {
  var objects, squareGeometry, squareMaterial, squareMesh, triangleGeometry, triangleMaterial, triangleMesh;
  objects = {};
  triangleGeometry = new THREE.Geometry();
  triangleGeometry.vertices.push(new THREE.Vector3(0.0, 1.0, 0.0));
  triangleGeometry.vertices.push(new THREE.Vector3(-1.0, -1.0, 0.0));
  triangleGeometry.vertices.push(new THREE.Vector3(1.0, -1.0, 0.0));
  triangleGeometry.faces.push(new THREE.Face3(0, 1, 2));
  triangleGeometry.faces[0].vertexColors[0] = new THREE.Color(0xff0000);
  triangleGeometry.faces[0].vertexColors[1] = new THREE.Color(0x00ff00);
  triangleGeometry.faces[0].vertexColors[2] = new THREE.Color(0x0000ff);
  triangleMaterial = new THREE.MeshBasicMaterial({
    vertexColors: THREE.VertexColors,
    side: THREE.DoubleSide
  });
  triangleMesh = new THREE.Mesh(triangleGeometry, triangleMaterial);
  triangleMesh.position.set(-1.5, 0.0, 4.0);
  scene.add(triangleMesh);
  objects.triangle = triangleMesh;
  squareGeometry = new THREE.Geometry();
  squareGeometry.vertices.push(new THREE.Vector3(-1.0, 1.0, 0.0));
  squareGeometry.vertices.push(new THREE.Vector3(1.0, 1.0, 0.0));
  squareGeometry.vertices.push(new THREE.Vector3(1.0, -1.0, 0, 0));
  squareGeometry.vertices.push(new THREE.Vector3(-1.0, -1.0, 0.0));
  squareGeometry.faces.push(new THREE.Face3(0, 1, 2));
  squareGeometry.faces.push(new THREE.Face3(0, 2, 3));
  squareMaterial = new THREE.MeshBasicMaterial({
    color: 0x8080ff,
    side: THREE.DoubleSide
  });
  squareMesh = new THREE.Mesh(squareGeometry, squareMaterial);
  squareMesh.position.set(1.5, 0.0, 4.0);
  scene.add(squareMesh);
  objects.square = squareMesh;
  return objects;
};

init = function(scene, config, dataset) {
  return initMesh(scene, config, dataset);
};

module.exports = init;



},{}],6:[function(require,module,exports){
'use strict';
var init;

init = function() {
  var scene;
  scene = new THREE.Scene();
  return scene;
};

module.exports = init;



},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvVXNlcnMvbmFva2lzL2dpdGh1Yi90aHJlZWpzLWRlbW9zL2RlbW8xL3NyYy9jb2ZmZWUvbWFpbi5jb2ZmZWUiLCIvVXNlcnMvbmFva2lzL2dpdGh1Yi90aHJlZWpzLWRlbW9zL2RlbW8xL3NyYy9jb2ZmZWUvY2FtZXJhLmNvZmZlZSIsIi9Vc2Vycy9uYW9raXMvZ2l0aHViL3RocmVlanMtZGVtb3MvZGVtbzEvc3JjL2NvZmZlZS9jb25maWcuY29mZmVlIiwiL1VzZXJzL25hb2tpcy9naXRodWIvdGhyZWVqcy1kZW1vcy9kZW1vMS9zcmMvY29mZmVlL2xpZ2h0LmNvZmZlZSIsIi9Vc2Vycy9uYW9raXMvZ2l0aHViL3RocmVlanMtZGVtb3MvZGVtbzEvc3JjL2NvZmZlZS9vYmplY3QuY29mZmVlIiwiL1VzZXJzL25hb2tpcy9naXRodWIvdGhyZWVqcy1kZW1vcy9kZW1vMS9zcmMvY29mZmVlL3NjZW5lLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0VDLFlBQUEsQ0FBQTtBQUFBLElBQUEsNEhBQUE7O0FBQUEsTUFFRCxHQUFTLE9BQUEsQ0FBUyxVQUFULENBRlIsQ0FBQTs7QUFBQSxVQUdELEdBQWEsT0FBQSxDQUFTLFNBQVQsQ0FIWixDQUFBOztBQUFBLFdBSUQsR0FBYyxPQUFBLENBQVMsVUFBVCxDQUpiLENBQUE7O0FBQUEsVUFLRCxHQUFhLE9BQUEsQ0FBUyxTQUFULENBTFosQ0FBQTs7QUFBQSxZQU1ELEdBQWUsT0FBQSxDQUFTLFVBQVQsQ0FOZCxDQUFBOztBQUFBLE1BUUQsR0FBUyxJQVJSLENBQUE7O0FBQUEsS0FTRCxHQUFRLElBVFAsQ0FBQTs7QUFBQSxRQVVELEdBQVcsSUFWVixDQUFBOztBQUFBLE9BV0QsR0FBVSxJQVhULENBQUE7O0FBQUEsSUFjRCxHQUFPLFNBQUMsSUFBRCxHQUFBO0FBQ0ws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QyxRQUFRLENBQUMsR0FBcEIsQ0FBd0IsR0FBeEIsRUFBNkIsR0FBN0IsRUFBa0MsR0FBbEMsQ0FsQ0EsQ0FBQTtBQUFBLEVBbUNBLEtBQUssQ0FBQyxHQUFOLENBQVUsVUFBVixDQW5DQSxDQUFBO0FBQUEsRUFvQ0EsT0FBTyxDQUFDLE1BQVIsR0FBaUIsVUFwQ2pCLENBQUE7QUFzQ0EsU0FBTyxPQUFQLENBdkNTO0FBQUEsQ0FGVixDQUFBOztBQUFBLElBNENELEdBQU8sU0FBQyxLQUFELEVBQVEsTUFBUixFQUFnQixPQUFoQixHQUFBO0FBQ0wsU0FBTyxRQUFBLENBQVMsS0FBVCxFQUFnQixNQUFoQixFQUF3QixPQUF4QixDQUFQLENBREs7QUFBQSxDQTVDTixDQUFBOztBQUFBLE1BK0NLLENBQUMsT0FBUCxHQUFpQixJQS9DaEIsQ0FBQTs7Ozs7QUNBQSxZQUFBLENBQUE7QUFBQSxJQUFBLElBQUE7O0FBQUEsSUFFRCxHQUFPLFNBQUEsR0FBQTtBQUNMLE1BQUEsS0FBQTtBQUFBLEVBQUEsS0FBQSxHQUFZLElBQUEsS0FBSyxDQUFDLEtBQU4sQ0FBQSxDQUFaLENBQUE7QUFDQSxTQUFPLEtBQVAsQ0FGSztBQUFBLENBRk4sQ0FBQTs7QUFBQSxNQU1LLENBQUMsT0FBUCxHQUFpQixJQU5oQixDQUFBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIiMgRnJvbSBmb2xsb3dpbmcgdHV0b3JpYWwuIFRoYW5rcy5cbiMgaHR0cDovL3d3dy5qb2hhbm5lcy1yYWlkYS5kZS90dXRvcmlhbHMuaHRtXG4ndXNlIHN0cmljdCdcblxuY29uZmlnID0gcmVxdWlyZSgnLi9jb25maWcnKVxuVGhyZWVTY2VuZSA9IHJlcXVpcmUoJy4vc2NlbmUnKVxuVGhyZWVDYW1lcmEgPSByZXF1aXJlKCcuL2NhbWVyYScpXG5UaHJlZUxpZ2h0ID0gcmVxdWlyZSgnLi9saWdodCcpXG5UaHJlZU9iamVjdHMgPSByZXF1aXJlKCcuL29iamVjdCcpXG5cbmNhbWVyYSA9IG51bGxcbnNjZW5lID0gbnVsbFxucmVuZGVyZXIgPSBudWxsXG5vYmplY3RzID0gbnVsbFxuXG5cbmluaXQgPSAoZGF0YSkgLT5cbiAgc2NlbmUgPSBUaHJlZVNjZW5lKGNvbmZpZylcbiAgY2FtZXJhID0gVGhyZWVDYW1lcmEoc2NlbmUsIGNvbmZpZylcbiAgI2xpZ2h0ID0gVGhyZWVMaWdodChzY2VuZSlcbiAgb2JqZWN0cyA9IFRocmVlT2JqZWN0cyhzY2VuZSwgY29uZmlnLCBkYXRhKVxuXG4gICRjb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2FudmFzJylcblxuICBpZiB3aW5kb3cuV2ViR0xSZW5kZXJpbmdDb250ZXh0XG4gICAgcmVuZGVyZXIgPSBuZXcgVEhSRUUuV2ViR0xSZW5kZXJlcihcbiAgICAgIGFudGlhbGlhczogdHJ1ZVxuICAgIClcbiAgZWxzZVxuICAgIHJlbmRlcmVyID0gbmV3IFRIUkVFLkNhbnZhc1JlbmRlcmVyKClcblxuICAjcmVuZGVyZXIuc2V0U2l6ZShjb25maWcuV0lEVEgsIGNvbmZpZy5IRUlHSFQpXG4gIHJlbmRlcmVyLnNldFNpemUod2luZG93LmlubmVyV2lkdGgsIHdpbmRvdy5pbm5lckhlaWdodClcblxuICAjIGNvbG9yLCBvcGFjaXR5XG4gIHJlbmRlcmVyLnNldENsZWFyQ29sb3IoMHgwMDAwMDAsIDEpXG4gICRjb250YWluZXIuYXBwZW5kQ2hpbGQocmVuZGVyZXIuZG9tRWxlbWVudClcblxuICBhbmltYXRlU2NlbmUoKVxuXG5yZW5kZXJTY2VuZSA9ICgpIC0+XG4gIHJlbmRlcmVyLnJlbmRlcihzY2VuZSwgY2FtZXJhKVxuICByZXR1cm5cblxuYW5pbWF0ZVNjZW5lID0gKCkgLT5cbiAgb2JqZWN0cy50cmlhbmdsZS5yb3RhdGlvbi55ICs9IDAuMVxuICBvYmplY3RzLnNxdWFyZS5yb3RhdGlvbi54IC09IDAuMDc1XG4gIHJlcXVlc3RBbmltYXRpb25GcmFtZShhbmltYXRlU2NlbmUpXG4gIHJlbmRlclNjZW5lKClcbiAgcmV0dXJuXG5cbiMgaW5pdGlhbGl6ZVxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBpbml0LCBmYWxzZSlcblxuXG5cbiMgaW5pdGlhbGl6ZSB3aXRoIHNvbWUgZGF0YVxuI2RhdGFVcmwgPSAnZGF0YS9zb21ldGhpbmcuanNvbidcbiNcbiNnZXQoZGF0YVVybCwgKHJlc3BvbnNlKSAtPlxuIyAgaW5pdChyZXNwb25zZSlcbiMgICNsb29wKClcbiMpXG5cbiIsIid1c2Ugc3RyaWN0J1xuY29uZmlnID0gcmVxdWlyZSgnLi9jb25maWcnKVxuXG5pbml0ID0gKHNjZW5lLCBjb25maWcpLT5cbiAgY2FtZXJhID0gbmV3IFRIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhKDQ1LCB3aW5kb3cuaW5uZXJXaWR0aCAvIHdpbmRvdy5pbm5lckhlaWdodCwgMSwgMTAwKVxuICBjYW1lcmEucG9zaXRpb24uc2V0KDAsIDAsIDEwKVxuICBjYW1lcmEubG9va0F0KHNjZW5lLnBvc2l0aW9uKVxuICBzY2VuZS5hZGQoY2FtZXJhKVxuICByZXR1cm4gY2FtZXJhXG5cbm1vZHVsZS5leHBvcnRzID0gaW5pdFxuIiwiJ3VzZSBzdHJpY3QnXG5jb25maWcgPSB7XG59XG5cbm1vZHVsZS5leHBvcnQgPSBjb25maWdcbiIsIid1c2Ugc3RyaWN0J1xuXG5pbml0ID0gKHNjZW5lKSAtPlxuICBwb2ludExpZ2h0ID0gbmV3IFRIUkVFLlBvaW50TGlnaHQoMHhmZmZmZmYpXG4gIHBvaW50TGlnaHQucG9zaXRpb24ueCA9IDEwXG4gIHBvaW50TGlnaHQucG9zaXRpb24ueSA9IDUwXG4gIHBvaW50TGlnaHQucG9zaXRpb24ueiA9IDEzMFxuICBzY2VuZS5hZGQocG9pbnRMaWdodClcblxuICByZXR1cm4gcG9pbnRMaWdodFxuXG5tb2R1bGUuZXhwb3J0cyA9IGluaXRcbiIsIid1c2Ugc3RyaWN0J1xuXG5pbml0TWVzaCA9IChzY2VuZSwgY29uZmlnLCBkYXRhc2V0KSAtPlxuICBvYmplY3RzID0ge31cblxuICB0cmlhbmdsZUdlb21ldHJ5ID0gbmV3IFRIUkVFLkdlb21ldHJ5KClcbiAgdHJpYW5nbGVHZW9tZXRyeS52ZXJ0aWNlcy5wdXNoKG5ldyBUSFJFRS5WZWN0b3IzKDAuMCwgMS4wLCAwLjApKVxuICB0cmlhbmdsZUdlb21ldHJ5LnZlcnRpY2VzLnB1c2gobmV3IFRIUkVFLlZlY3RvcjMoLTEuMCwgLTEuMCwgMC4wKSlcbiAgdHJpYW5nbGVHZW9tZXRyeS52ZXJ0aWNlcy5wdXNoKG5ldyBUSFJFRS5WZWN0b3IzKDEuMCwgLTEuMCwgMC4wKSlcbiAgdHJpYW5nbGVHZW9tZXRyeS5mYWNlcy5wdXNoKG5ldyBUSFJFRS5GYWNlMygwLCAxLCAyKSlcbiAgdHJpYW5nbGVHZW9tZXRyeS5mYWNlc1swXS52ZXJ0ZXhDb2xvcnNbMF0gPSBuZXcgVEhSRUUuQ29sb3IoMHhmZjAwMDApXG4gIHRyaWFuZ2xlR2VvbWV0cnkuZmFjZXNbMF0udmVydGV4Q29sb3JzWzFdID0gbmV3IFRIUkVFLkNvbG9yKDB4MDBmZjAwKVxuICB0cmlhbmdsZUdlb21ldHJ5LmZhY2VzWzBdLnZlcnRleENvbG9yc1syXSA9IG5ldyBUSFJFRS5Db2xvcigweDAwMDBmZilcblxuICB0cmlhbmdsZU1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKFxuICAgIHZlcnRleENvbG9yczogVEhSRUUuVmVydGV4Q29sb3JzXG4gICAgc2lkZTogVEhSRUUuRG91YmxlU2lkZVxuICApXG4gIHRyaWFuZ2xlTWVzaCA9IG5ldyBUSFJFRS5NZXNoKHRyaWFuZ2xlR2VvbWV0cnksIHRyaWFuZ2xlTWF0ZXJpYWwpXG4gIHRyaWFuZ2xlTWVzaC5wb3NpdGlvbi5zZXQoLTEuNSwgMC4wLCA0LjApXG4gIHNjZW5lLmFkZCh0cmlhbmdsZU1lc2gpXG4gIG9iamVjdHMudHJpYW5nbGUgPSB0cmlhbmdsZU1lc2hcblxuXG4gIHNxdWFyZUdlb21ldHJ5ID0gbmV3IFRIUkVFLkdlb21ldHJ5KClcbiAgc3F1YXJlR2VvbWV0cnkudmVydGljZXMucHVzaCggbmV3IFRIUkVFLlZlY3RvcjMoLTEuMCwgMS4wLCAwLjApKVxuICBzcXVhcmVHZW9tZXRyeS52ZXJ0aWNlcy5wdXNoKCBuZXcgVEhSRUUuVmVjdG9yMygxLjAsIDEuMCwgMC4wKSlcbiAgc3F1YXJlR2VvbWV0cnkudmVydGljZXMucHVzaCggbmV3IFRIUkVFLlZlY3RvcjMoMS4wLCAtMS4wLCAwLDApKVxuICBzcXVhcmVHZW9tZXRyeS52ZXJ0aWNlcy5wdXNoKCBuZXcgVEhSRUUuVmVjdG9yMygtMS4wLCAtMS4wLCAwLjApKVxuICBzcXVhcmVHZW9tZXRyeS5mYWNlcy5wdXNoKG5ldyBUSFJFRS5GYWNlMygwLCAxLCAyKSlcbiAgc3F1YXJlR2VvbWV0cnkuZmFjZXMucHVzaChuZXcgVEhSRUUuRmFjZTMoMCwgMiwgMykpXG5cbiAgc3F1YXJlTWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoXG4gICAgY29sb3I6IDB4ODA4MGZmXG4gICAgc2lkZTogVEhSRUUuRG91YmxlU2lkZVxuICApXG4gIHNxdWFyZU1lc2ggPSBuZXcgVEhSRUUuTWVzaChzcXVhcmVHZW9tZXRyeSwgc3F1YXJlTWF0ZXJpYWwpXG4gIHNxdWFyZU1lc2gucG9zaXRpb24uc2V0KDEuNSwgMC4wLCA0LjApXG4gIHNjZW5lLmFkZChzcXVhcmVNZXNoKVxuICBvYmplY3RzLnNxdWFyZSA9IHNxdWFyZU1lc2hcblxuICByZXR1cm4gb2JqZWN0c1xuXG5cbmluaXQgPSAoc2NlbmUsIGNvbmZpZywgZGF0YXNldCkgLT5cbiAgcmV0dXJuIGluaXRNZXNoKHNjZW5lLCBjb25maWcsIGRhdGFzZXQpXG5cbm1vZHVsZS5leHBvcnRzID0gaW5pdFxuIiwiJ3VzZSBzdHJpY3QnXG5cbmluaXQgPSAoKSAtPlxuICBzY2VuZSA9IG5ldyBUSFJFRS5TY2VuZSgpXG4gIHJldHVybiBzY2VuZVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluaXRcbiJdfQ==
