(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';
var ThreeCamera, ThreeLight, ThreeObjects, ThreeScene, animateScene, camera, config, init, objects, renderScene, renderer, scene, xRotation, yRotation, zRotation;

config = require('./config');

ThreeScene = require('./scene');

ThreeCamera = require('./camera');

ThreeLight = require('./light');

ThreeObjects = require('./object');

camera = null;

scene = null;

renderer = null;

objects = null;

xRotation = 0.0;

yRotation = 0.0;

zRotation = 0.0;

init = function(data) {
  var $container;
  scene = ThreeScene(config);
  camera = ThreeCamera(scene, config);
  objects = ThreeObjects(scene, config, data);
  $container = document.getElementById('canvas');
  if (window.WebGLRenderingContext) {
    renderer = new THREE.WebGLRenderer({
      antialias: true
    });
  } else {
    renderer = new THREE.CanvasRenderer();
  }
  renderer.setSize(window.innerWidth, window.innerHeight);
  renderer.setClearColor(0x000000, 1);
  $container.appendChild(renderer.domElement);
  return animateScene();
};

renderScene = function() {
  renderer.render(scene, camera);
};

animateScene = function() {
  xRotation += 0.03;
  yRotation += 0.02;
  zRotation += 0.04;
  objects.box.rotation.set(xRotation, yRotation, zRotation);
  requestAnimationFrame(animateScene);
  renderScene();
};

window.addEventListener('load', init, false);



},{"./camera":2,"./config":3,"./light":4,"./object":5,"./scene":6}],2:[function(require,module,exports){
'use strict';
var config, init;

config = require('./config');

init = function(scene, config) {
  var camera;
  camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 100);
  camera.position.set(0, 0, 10);
  camera.lookAt(scene.position);
  scene.add(camera);
  return camera;
};

module.exports = init;



},{"./config":3}],3:[function(require,module,exports){
'use strict';
var config;

config = {};

module["export"] = config;



},{}],4:[function(require,module,exports){
'use strict';
var init;

init = function(scene) {
  var pointLight;
  pointLight = new THREE.PointLight(0xffffff);
  pointLight.position.x = 10;
  pointLight.position.y = 50;
  pointLight.position.z = 130;
  scene.add(pointLight);
  return pointLight;
};

module.exports = init;



},{}],5:[function(require,module,exports){
'use strict';
var init, initMesh;

initMesh = function(scene, config, dataset) {
  var boxGeometry, boxMaterial, boxMesh, objects, texture1;
  objects = {};
  boxGeometry = new THREE.BoxGeometry(2.0, 2.0, 2.0);
  texture1 = new THREE.ImageUtils.loadTexture('seckie.png');
  texture1.minFilter = THREE.LinearFilter;
  boxMaterial = new THREE.MeshBasicMaterial({
    map: texture1,
    side: THREE.DoubleSide
  });
  boxMesh = new THREE.Mesh(boxGeometry, boxMaterial);
  boxMesh.position.set(0.0, 0.0, 4.0);
  scene.add(boxMesh);
  objects.box = boxMesh;
  return objects;
};

init = function(scene, config, dataset) {
  return initMesh(scene, config, dataset);
};

module.exports = init;



},{}],6:[function(require,module,exports){
'use strict';
var init;

init = function() {
  var scene;
  scene = new THREE.Scene();
  return scene;
};

module.exports = init;



},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvVXNlcnMvbmFva2lzL2dpdGh1Yi90aHJlZWpzLWRlbW9zL2RlbW8xL3NyYy9jb2ZmZWUvbWFpbi5jb2ZmZWUiLCIvVXNlcnMvbmFva2lzL2dpdGh1Yi90aHJlZWpzLWRlbW9zL2RlbW8xL3NyYy9jb2ZmZWUvY2FtZXJhLmNvZmZlZSIsIi9Vc2Vycy9uYW9raXMvZ2l0aHViL3RocmVlanMtZGVtb3MvZGVtbzEvc3JjL2NvZmZlZS9jb25maWcuY29mZmVlIiwiL1VzZXJzL25hb2tpcy9naXRodWIvdGhyZWVqcy1kZW1vcy9kZW1vMS9zcmMvY29mZmVlL2xpZ2h0LmNvZmZlZSIsIi9Vc2Vycy9uYW9raXMvZ2l0aHViL3RocmVlanMtZGVtb3MvZGVtbzEvc3JjL2NvZmZlZS9vYmplY3QuY29mZmVlIiwiL1VzZXJzL25hb2tpcy9naXRodWIvdGhyZWVqcy1kZW1vcy9kZW1vMS9zcmMvY29mZmVlL3NjZW5lLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0VBLFlBQUEsQ0FBQTtBQUFBLElBQUEsNkpBQUE7O0FBQUEsTUFFQSxHQUFTLE9BQUEsQ0FBUSxVQUFSLENBRlQsQ0FBQTs7QUFBQSxVQUdBLEdBQWEsT0FBQSxDQUFRLFNBQVIsQ0FIYixDQUFBOztBQUFBLFdBSUEsR0FBYyxPQUFBLENBQVEsVUFBUixDQUpkLENBQUE7O0FBQUEsVUFLQSxHQUFhLE9BQUEsQ0FBUSxTQUFSLENBTGIsQ0FBQTs7QUFBQSxZQU1BLEdBQWUsT0FBQSxDQUFRLFVBQVIsQ0FOZixDQUFBOztBQUFBLE1BUUEsR0FBUyxJQVJULENBQUE7O0FBQUEsS0FTQSxHQUFRLElBVFIsQ0FBQTs7QUFBQSxRQVVBLEdBQVcsSUFWWCxDQUFBOztBQUFBLE9BV0EsR0FBVSxJQVhWLENBQUE7O0FBQUEsU0FhQSxHQUFZLEdBYlosQ0FBQTs7QUFBQSxTQWNB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R0FEZ0IsQ0FYbEIsQ0FBQTtBQUFBLEVBZ0JBLE9BQUEsR0FBYyxJQUFBLEtBQUssQ0FBQyxJQUFOLENBQVcsV0FBWCxFQUF3QixXQUF4QixDQWhCZCxDQUFBO0FBQUEsRUFpQkEsT0FBTyxDQUFDLFFBQVEsQ0FBQyxHQUFqQixDQUFxQixHQUFyQixFQUEwQixHQUExQixFQUErQixHQUEvQixDQWpCQSxDQUFBO0FBQUEsRUFrQkEsS0FBSyxDQUFDLEdBQU4sQ0FBVSxPQUFWLENBbEJBLENBQUE7QUFBQSxFQW1CQSxPQUFPLENBQUMsR0FBUixHQUFjLE9BbkJkLENBQUE7QUFxQkEsU0FBTyxPQUFQLENBdEJTO0FBQUEsQ0FGWCxDQUFBOztBQUFBLElBMkJBLEdBQU8sU0FBQyxLQUFELEVBQVEsTUFBUixFQUFnQixPQUFoQixHQUFBO0FBQ0wsU0FBTyxRQUFBLENBQVMsS0FBVCxFQUFnQixNQUFoQixFQUF3QixPQUF4QixDQUFQLENBREs7QUFBQSxDQTNCUCxDQUFBOztBQUFBLE1BOEJNLENBQUMsT0FBUCxHQUFpQixJQTlCakIsQ0FBQTs7Ozs7QUNBQSxZQUFBLENBQUE7QUFBQSxJQUFBLElBQUE7O0FBQUEsSUFFQSxHQUFPLFNBQUEsR0FBQTtBQUNMLE1BQUEsS0FBQTtBQUFBLEVBQUEsS0FBQSxHQUFZLElBQUEsS0FBSyxDQUFDLEtBQU4sQ0FBQSxDQUFaLENBQUE7QUFDQSxTQUFPLEtBQVAsQ0FGSztBQUFBLENBRlAsQ0FBQTs7QUFBQSxNQU1NLENBQUMsT0FBUCxHQUFpQixJQU5qQixDQUFBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIiMgRnJvbSBmb2xsb3dpbmcgdHV0b3JpYWwuIFRoYW5rcy5cbiMgaHR0cDovL3d3dy5qb2hhbm5lcy1yYWlkYS5kZS90dXRvcmlhbHMuaHRtXG4ndXNlIHN0cmljdCdcblxuY29uZmlnID0gcmVxdWlyZSgnLi9jb25maWcnKVxuVGhyZWVTY2VuZSA9IHJlcXVpcmUoJy4vc2NlbmUnKVxuVGhyZWVDYW1lcmEgPSByZXF1aXJlKCcuL2NhbWVyYScpXG5UaHJlZUxpZ2h0ID0gcmVxdWlyZSgnLi9saWdodCcpXG5UaHJlZU9iamVjdHMgPSByZXF1aXJlKCcuL29iamVjdCcpXG5cbmNhbWVyYSA9IG51bGxcbnNjZW5lID0gbnVsbFxucmVuZGVyZXIgPSBudWxsXG5vYmplY3RzID0gbnVsbFxuXG54Um90YXRpb24gPSAwLjBcbnlSb3RhdGlvbiA9IDAuMFxuelJvdGF0aW9uID0gMC4wXG5cblxuaW5pdCA9IChkYXRhKSAtPlxuICBzY2VuZSA9IFRocmVlU2NlbmUoY29uZmlnKVxuICBjYW1lcmEgPSBUaHJlZUNhbWVyYShzY2VuZSwgY29uZmlnKVxuICAjbGlnaHQgPSBUaHJlZUxpZ2h0KHNjZW5lKVxuICBvYmplY3RzID0gVGhyZWVPYmplY3RzKHNjZW5lLCBjb25maWcsIGRhdGEpXG5cbiAgJGNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjYW52YXMnKVxuXG4gIGlmIHdpbmRvdy5XZWJHTFJlbmRlcmluZ0NvbnRleHRcbiAgICByZW5kZXJlciA9IG5ldyBUSFJFRS5XZWJHTFJlbmRlcmVyKFxuICAgICAgYW50aWFsaWFzOiB0cnVlXG4gICAgKVxuICBlbHNlXG4gICAgcmVuZGVyZXIgPSBuZXcgVEhSRUUuQ2FudmFzUmVuZGVyZXIoKVxuXG4gICNyZW5kZXJlci5zZXRTaXplKGNvbmZpZy5XSURUSCwgY29uZmlnLkhFSUdIVClcbiAgcmVuZGVyZXIuc2V0U2l6ZSh3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0KVxuXG4gICMgY29sb3IsIG9wYWNpdHlcbiAgcmVuZGVyZXIuc2V0Q2xlYXJDb2xvcigweDAwMDAwMCwgMSlcbiAgJGNvbnRhaW5lci5hcHBlbmRDaGlsZChyZW5kZXJlci5kb21FbGVtZW50KVxuXG4gIGFuaW1hdGVTY2VuZSgpXG5cbnJlbmRlclNjZW5lID0gKCkgLT5cbiAgcmVuZGVyZXIucmVuZGVyKHNjZW5lLCBjYW1lcmEpXG4gIHJldHVyblxuXG5hbmltYXRlU2NlbmUgPSAoKSAtPlxuICB4Um90YXRpb24gKz0gMC4wM1xuICB5Um90YXRpb24gKz0gMC4wMlxuICB6Um90YXRpb24gKz0gMC4wNFxuICBvYmplY3RzLmJveC5yb3RhdGlvbi5zZXQoeFJvdGF0aW9uLCB5Um90YXRpb24sIHpSb3RhdGlvbilcblxuICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYW5pbWF0ZVNjZW5lKVxuICAjIOWun+mam+OBryB0ZXh0dXJlIGltYWdlIOOBjOODreODvOODieOBleOCjOOBpuOBi+OCieWun+ihjOOBmeOBueOBjVxuICByZW5kZXJTY2VuZSgpXG4gIHJldHVyblxuXG4jIGluaXRpYWxpemVcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgaW5pdCwgZmFsc2UpXG5cblxuXG4jIGluaXRpYWxpemUgd2l0aCBzb21lIGRhdGFcbiNkYXRhVXJsID0gJ2RhdGEvc29tZXRoaW5nLmpzb24nXG4jXG4jZ2V0KGRhdGFVcmwsIChyZXNwb25zZSkgLT5cbiMgIGluaXQocmVzcG9uc2UpXG4jICAjbG9vcCgpXG4jKVxuXG4iLCIndXNlIHN0cmljdCdcbmNvbmZpZyA9IHJlcXVpcmUoJy4vY29uZmlnJylcblxuaW5pdCA9IChzY2VuZSwgY29uZmlnKS0+XG4gIGNhbWVyYSA9IG5ldyBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYSg0NSwgd2luZG93LmlubmVyV2lkdGggLyB3aW5kb3cuaW5uZXJIZWlnaHQsIDEsIDEwMClcbiAgY2FtZXJhLnBvc2l0aW9uLnNldCgwLCAwLCAxMClcbiAgY2FtZXJhLmxvb2tBdChzY2VuZS5wb3NpdGlvbilcbiAgc2NlbmUuYWRkKGNhbWVyYSlcbiAgcmV0dXJuIGNhbWVyYVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluaXRcbiIsIid1c2Ugc3RyaWN0J1xuY29uZmlnID0ge1xufVxuXG5tb2R1bGUuZXhwb3J0ID0gY29uZmlnXG4iLCIndXNlIHN0cmljdCdcblxuaW5pdCA9IChzY2VuZSkgLT5cbiAgcG9pbnRMaWdodCA9IG5ldyBUSFJFRS5Qb2ludExpZ2h0KDB4ZmZmZmZmKVxuICBwb2ludExpZ2h0LnBvc2l0aW9uLnggPSAxMFxuICBwb2ludExpZ2h0LnBvc2l0aW9uLnkgPSA1MFxuICBwb2ludExpZ2h0LnBvc2l0aW9uLnogPSAxMzBcbiAgc2NlbmUuYWRkKHBvaW50TGlnaHQpXG5cbiAgcmV0dXJuIHBvaW50TGlnaHRcblxubW9kdWxlLmV4cG9ydHMgPSBpbml0XG4iLCIndXNlIHN0cmljdCdcblxuaW5pdE1lc2ggPSAoc2NlbmUsIGNvbmZpZywgZGF0YXNldCkgLT5cbiAgb2JqZWN0cyA9IHt9XG5cbiAgYm94R2VvbWV0cnkgPSBuZXcgVEhSRUUuQm94R2VvbWV0cnkoMi4wLCAyLjAsIDIuMClcblxuICB0ZXh0dXJlMSA9IG5ldyBUSFJFRS5JbWFnZVV0aWxzLmxvYWRUZXh0dXJlKCdzZWNraWUucG5nJylcbiAgdGV4dHVyZTEubWluRmlsdGVyID0gVEhSRUUuTGluZWFyRmlsdGVyXG4gICN0ZXh0dXJlMS5tYWdGaWx0ZXIgPSBUSFJFRS5MaW5lYXJGaWx0ZXJcbiAgI3RleHR1cmUxLndyYXBTID0gVEhSRUUuUmVwZWF0V3JhcHBpbmdcbiAgI3RleHR1cmUxLndyYXBUID0gVEhSRUUuUmVwZWF0V3JhcHBpbmdcbiAgI3RleHR1cmUxLnJlcGVhdC54ID0gMVxuICAjdGV4dHVyZTEucmVwZWF0LnkgPSAxXG4gIGJveE1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKFxuICAgIG1hcDogdGV4dHVyZTFcbiAgICBzaWRlOiBUSFJFRS5Eb3VibGVTaWRlXG4gIClcblxuICBib3hNZXNoID0gbmV3IFRIUkVFLk1lc2goYm94R2VvbWV0cnksIGJveE1hdGVyaWFsKVxuICBib3hNZXNoLnBvc2l0aW9uLnNldCgwLjAsIDAuMCwgNC4wKVxuICBzY2VuZS5hZGQoYm94TWVzaClcbiAgb2JqZWN0cy5ib3ggPSBib3hNZXNoXG5cbiAgcmV0dXJuIG9iamVjdHNcblxuXG5pbml0ID0gKHNjZW5lLCBjb25maWcsIGRhdGFzZXQpIC0+XG4gIHJldHVybiBpbml0TWVzaChzY2VuZSwgY29uZmlnLCBkYXRhc2V0KVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluaXRcbiIsIid1c2Ugc3RyaWN0J1xuXG5pbml0ID0gKCkgLT5cbiAgc2NlbmUgPSBuZXcgVEhSRUUuU2NlbmUoKVxuICByZXR1cm4gc2NlbmVcblxubW9kdWxlLmV4cG9ydHMgPSBpbml0XG4iXX0=
